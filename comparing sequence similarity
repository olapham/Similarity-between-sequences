

# Import packages as required
import numpy as np
import pandas as pd
import scipy
from scipy import stats
import matplotlib.pyplot as plt
from statistics import mean, stdev
from Bio.Seq import Seq
from Bio import pairwise2
from Bio.pairwise2 import format_alignment

# Generate list of peptide outputs from each method (variable window size or variable peptide length)
HCV_100w_400l = "MSTNPKPQRKTKRNTNRRPQDVKFPGGGQIVGGVYLLPRRGPRLGVRATRKTSERSQPRGRRQPIPKARRPEGRTWAQPGYPWPLYGNEGCGWAGWLLSPRGSRPSWGPTDPRRRSRNLGKVIDTLTCGFADLMGYIPLVGAPLGGAARALAHGVRVLEDGVNYATGNLPGCSFSIFLLAITYSTYGKFLADGGCSGGAYDIIICDECHSTDATSILGIGTVLDQAETAGARLVVLATATPLEVIKGGRHLIFCHSKKKCDELAAKLVALGINAVAYYRGLDVSVIPTSGDVVVVATDALTPAETTVRLRAYMNTPGLPVCQDHLEFWEGPTPLLYRLGAVQNEVTLTHPITKYIMTCMSGIQYLAGLSTLPGNPAIASLMAFTAAVTSP"
HCV_100w_500l = "MSTNPKPQRKTKRNTNRRPQDVKFPGGGQIVGGVYLLPRRGPRLGVRATRKTSERSQPRGRRQPIPKARRPEGRTWAQPGYPWPLYGNEGCGWAGWLLSPRGSRPSWGPTDPRRRSRNLGKVIDTLTCGFADLMGYIPLVGAPLGGAARALAHGVRVLEDGVNYATGNLPGCSFSIFLLAPTGSGKSTKVPAAYAAQGYKVLVLNPSVAAITYSTYGKFLADGGCSGGAYDIIICDECHSTDATSILGIGTVLDQAETAGARLVVLATATPLEVIKGGRHLIFCHSKKKCDELAAKLVALGINAVAYYRGLDVSVIPTSGDVVVVATDALTPAETTVRLRAYMNTPGLPVCQDHLEFWEGPTPLLYRLGAVQNEVTLTHPITKYIMTCMSADLEVVTSTWVLVGGVLAALAAYCLSTGCVRQAEVIAPAVQTNWQKLETFWAKHMWNFISGIQYLAGLSTLPGNPAIASLMAFTAAVTSP"
HCV_100w_600l = "MSTNPKPQRKTKRNTNRRPQDVKFPGGGQIVGGVYLLPRRGPRLGVRATRKTSERSQPRGRRQPIPKARRPEGRTWAQPGYPWPLYGNEGCGWAGWLLSPRGSRPSWGPTDPRRRSRNLGKVIDTLTCGFADLMGYIPLVGAPLGGAARALAHGVRVLEDGVNYATGNLPGCSFSIFLLALCSALYVGDLCGSVFLVGQLFTFSPRRHWTTQDCNCSIYPGHITGHRMAWDMMMNWSPTTPTGSGKSTKVPAAYAAQGYKVLVLNPSVAAITYSTYGKFLADGGCSGGAYDIIICDECHSTDATSILGIGTVLDQAETAGARLVVLATATPLEVIKGGRHLIFCHSKKKCDELAAKLVALGINAVAYYRGLDVSVIPTSGDVVVVATDALMTGYTGDFDSVIDCNTCVTQTVDFSLDPTFTPAETTVRLRAYMNTPGLPVCQDHLEFWEGATVCARAQAPPPSWDQMWKCLIRLKPTLHGPTPLLYRLGAVQNEVTLTHPITKYIMTCMSADLEVVTSTWVLVGGVLAALAAYCLSTGCVRQAEVIAPAVQTNWQKLETFWAKHMWNFISGIQYLAGLSTLPGNPAIASLMAFTAAVTSP"

HCV_50w_600l = "MSTNPKPQRKTKRNTNRRPQDVKFPGGGQIVGGVYLLPRRGPRLGVRATRKTSERSQPRGRRQPIPKARRPEGRTWAQPGYPWPLYGNEGCGWAGWLLSPRGSRPSWGPTDPRRRSRNLGKVIDTLTCGFADLMGYIPLVGAPLGGAARALAHGVRVLEDGVNYATGNLPGCSFSIFLLAELSPLLLSTTQWQVLPCSFTTLPALSTGLIHLHQNIVDVQYLYGVGSSIASWAIKWEYVVTLGFGAYMSKAHGIDPNIRTGVRTITTGSPITYSTYGKFLADGGCSGGAYDIIICDECHSTDATSILGIGTVLDQAETAGARLVVLATATPPGSVTVPHPNIEEVALSTTGEIPFYGKAIPLEVIKGGRHLIFCHSKKKCDELAAKLVALGINAVAYYRGLDVSVIPTSGDVVVVATDALVFTGLTHIDAHFLSQTKQSGENFPYLVAYQATVCARAQAPPPSWDQMWKCLIRLKPTLHGPTPLLYRLGAVQNEVTLTHPITKYIMTCMSADLEVVTSTWVLVGGVLAALAAYCLSTGCVRQAEVIAPAVQTNWQKLETFWAKHMWNFISGIQYLAGLSTLPGNPAIASLMAFTAAVTSP"
HCV_75w_600l = "MSTNPKPQRKTKRNTNRRPQDVKFPGGGQIVGGVYLLPRRGPRLGVRATRKTSERSQPRGRRQPIPKARRPEGRTWAQPGYPWPLYGNEGCGWAGWLLSPRGSRPSWGPTDPRRRSRNLGKVIDTLTCGFADLMGYIPLVGAPLGGAARALAHGVRVLEDGVNYATGNLPGCSFSIFLLALLSCLTVPASAYQVRNSSGLTLPALSTGLIHLHQNIVDVQYLYGVGSSIASWAIKWEYVVPAAYAAQGYKVLVLNPSVAATLGFGAYMSKAHGIDPNIRTGVRTITTGSPITYSTYGKFLADGGCSGGAYDIIICDECHSTDATSILGIGTVLDQAETAGARLVVLATATPPGSVTVPHPNIEEVALSTTGEIPFYGKAIPLEVIKGGRHLIFCHSKKKCDELAAKLVALGINAVAYYRGLDVSVIPTSGDVVVVATDALMTGYTGDFDSVIDCNTCVTQTVDFSLDPTFTIETTTLPQDYDAGCAWYELTPAETTVRLRAYMNTPGLPVCQDHLEFWEGPPSWDQMWKCLIRLKPTLHGPTPLLYRLGAVQNEVTLTHPWAKHMWNFISGIQYLAGLSTLPGNPAIASLMAFTAAVTSP"
HCV_100w_600l = "MSTNPKPQRKTKRNTNRRPQDVKFPGGGQIVGGVYLLPRRGPRLGVRATRKTSERSQPRGRRQPIPKARRPEGRTWAQPGYPWPLYGNEGCGWAGWLLSPRGSRPSWGPTDPRRRSRNLGKVIDTLTCGFADLMGYIPLVGAPLGGAARALAHGVRVLEDGVNYATGNLPGCSFSIFLLALCSALYVGDLCGSVFLVGQLFTFSPRRHWTTQDCNCSIYPGHITGHRMAWDMMMNWSPTTPTGSGKSTKVPAAYAAQGYKVLVLNPSVAAITYSTYGKFLADGGCSGGAYDIIICDECHSTDATSILGIGTVLDQAETAGARLVVLATATPLEVIKGGRHLIFCHSKKKCDELAAKLVALGINAVAYYRGLDVSVIPTSGDVVVVATDALMTGYTGDFDSVIDCNTCVTQTVDFSLDPTFTPAETTVRLRAYMNTPGLPVCQDHLEFWEGATVCARAQAPPPSWDQMWKCLIRLKPTLHGPTPLLYRLGAVQNEVTLTHPITKYIMTCMSADLEVVTSTWVLVGGVLAALAAYCLSTGCVRQAEVIAPAVQTNWQKLETFWAKHMWNFISGIQYLAGLSTLPGNPAIASLMAFTAAVTSP"


# Group the peptides based on window size or length
HCV_100w = [HCV_100w_400l, HCV_100w_500l, HCV_100w_600l]

HCV_600 = [HCV_50w_600l, HCV_75w_600l, HCV_100w_600l]



# Write function for calculating similarity between different sequences
def calculate_similarity(seqs):
    scores = []
    for i in range(len(seqs)):
        for j in range(i+1, len(seqs)):
            # Convert sequences to Seq objects
            seq_obj1 = Seq(seqs[i])
            seq_obj2 = Seq(seqs[j])

            # Calculate pairwise alignment using the Needleman-Wunsch algorithm
            alignments = pairwise2.align.globalxx(seq_obj1, seq_obj2)

            # Extract the alignment score from the alignment object
            alignment_score = alignments[0].score

            # Append the alignment score to the scores list
            scores.append(alignment_score)

            # Extract the alignment with the highest score
            best_alignment = alignments[0]

            # Extract the aligned sequences from the alignment object
            aligned_seq1 = best_alignment[0]
            aligned_seq2 = best_alignment[1]

            # Calculate percent similarity by counting the number of matches and dividing by the length of the aligned sequences
            num_matches = sum(aa1 == aa2 for aa1, aa2 in zip(aligned_seq1, aligned_seq2))
            percent_similarity = (num_matches / len(aligned_seq1)) * 100

            # Calculate the mean and standard deviation of the scores as percentages
    mean_score = np.mean(scores) / len(seqs[0]) * 100
    std_dev = np.std(scores) / len(seqs[0]) * 100

    # Print the aligned sequences and percent similarity
    print(f"Pair: ({seqs[i]}, {seqs[j]})")
    print(format_alignment(*best_alignment))
    print(scores)
    print(f"Percent similarity: {percent_similarity:.2f}%")
    print(f"Mean score: {mean_score:.2f}%")
    print(f"Standard deviation: {std_dev:.2f}%")
    print()
    return(scores, mean_score, std_dev)

# Analyse similarity between all peptides of matched length, varying by window size
HCV_100wi = calculate_similarity(HCV_100w)
HCV_600l = calculate_similarity(HCV_600)



# Generate p-values by Kruskal-Wallis test to account for repeated measures
lengt = scipy.stats.kruskal(HCV_500l[0], HCV_1000l[0], HCV_2000l[0])
wind = scipy.stats.kruskal(HCV_20wi[0], HCV_50wi[0], HCV_100wi[0])

# Output suggests that changing the length produces a significant difference across outputs in similarity
# But changing window size has minimal impact
# You could use a similar approach to compare the predicted stabilities and immunogenicities of the outputs
